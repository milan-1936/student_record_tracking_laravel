<?phpnamespace App\Http\Controllers;use App\Models\Examination;use App\Models\FMExamSubject;use App\Models\ObtMarks;use App\Models\students;use Illuminate\Http\Request;class ExamController extends Controller{    public function StoreExam(Request $request){        $exam = $request->validate([            'name'=> 'required'            ]        );        Examination::create($exam);        $fms = $request->validate([                'english'=> 'required|numeric',                'nepali' => 'required|numeric',                'math'=> 'required|numeric',                'science'=> 'required|numeric',                'social'=> 'required|numeric',                'opti'=> 'required|numeric',                'optii'=> 'required|numeric',            ]        );        $fms['exam_id'] = Examination::where('name', $request->name)->first()->id;        FMExamSubject::create($fms);        return to_route('examination')->with('message', 'Exam Added Successfully');    }    public function ShowExams(){        $examids = FMExamSubject::all();        $marks_table = ObtMarks::latest()->limit(1)->get();        $exams = Examination::limit(5)->get();        return view('dashboard.examination', compact('exams', 'marks_table', 'examids'));    }    public function MarkEntryShow(){        $fms = FMExamSubject::latest()->limit(1)->get();        $exams = FMExamSubject::where('exam_id', Examination::latest()->first()->id)->get();        $students = students::all();        return view('dashboard.enter_marks', compact('students', 'exams', 'fms'));    }    public function MarkStore(Request $request){        $data=$request->all();        $student=[];        $data = $data['student'];        foreach($data as $studentData) {            $student_id = $studentData['student_id'];            $obtained_marks = [                'english' => $studentData['english'],                'nepali' => $studentData['nepali'],                'math' => $studentData['math'],                'science' => $studentData['science'],                'social' => $studentData['social'],                'opti' => $studentData['opti'],                'optii' => $studentData['optii'],            ];            $fm_exam_subject_id=$studentData['examid'];            $fms = FMExamSubject::where('id', $fm_exam_subject_id)->first();            $pass_marks = [                'english' => $fms->english * 0.30,                'nepali' => $fms->nepali * 0.30,                'math' => $fms->math * 0.30,                'science' => $fms->science * 0.30,                'social' => $fms->social * 0.30,                'opti' => $fms->opti * 0.30,                'optii' => $fms->optii * 0.30,            ];            $full_marks = [                'english' => $fms->english,                'nepali' => $fms->nepali,                'math' => $fms->math,                'science' => $fms->science,                'social' => $fms->social,                'opti' => $fms->opti,                'optii' => $fms->optii,            ];           $credit_hours =[                'english' => 5,                'nepali' => 5,                'math' => 5,                'science' => 5,                'social' => 4,                'opti' => 4,                'optii' => 4,            ];           $ispassed = true;           foreach($pass_marks as $subject=> $pass_mark){                if($obtained_marks[$subject] < $pass_mark){                    $ispassed = false;                    break;                }            }           if($ispassed){               $total_marks= array_sum($obtained_marks);               $percentage = ($total_marks / array_sum($full_marks)) * 100;               $total_weighted_points =0;               $total_credit_hours = 0;               foreach($obtained_marks as $subject =>$mark){                    $credit = $credit_hours[$subject];                    $grade_point = $this->getGradePoint($percentage);                    $total_weighted_points += $grade_point * $credit;                    $total_credit_hours += $credit;               }               $gpa = round($total_weighted_points / $total_credit_hours, 2);//               echo $gpa . "<-gpa \t\t\t Marks->". $mark .  " \n" . $percentage . "%\t\t " . $grade_point;           }else{               $percentage= "NA";                $total_marks= "NA";                $gpa = "NA";           }           $student_data = [                'student_id' => $student_id,                'fm_exam_subject_id' => $fm_exam_subject_id,                'eng'=> $obtained_marks['english'],                'nep'=> $obtained_marks['nepali'],                'math'=>$obtained_marks['math'],                'sci' =>$obtained_marks['science'],                'soc' =>$obtained_marks['social'],                'opti' =>$obtained_marks['opti'],                'optii' =>$obtained_marks['optii'],                'total' =>$total_marks,                'percentage' => $percentage,                'grade' => $gpa,            ];           $student[]=[               'student_id'=> $student_id,               'total_mark' =>$total_marks,               'fm_exam_subject_id' => $fm_exam_subject_id,               ];           ObtMarks::create($student_data);        }        $this->UpdateRank($student);        return to_route('examination')->with('message', "Marks Updated!! ");    }    function UpdateRank($students) {        // Filter only students with numeric total marks (passed students)        $passed_students = array_filter($students, function ($s) {            return is_numeric($s['total_mark']);        });        // Sort students in descending order of total marks        usort($passed_students, function ($a, $b) {            return $b['total_mark'] <=> $a['total_mark'];        });        $rank = 0;        $prev_marks = null;        $same_rank_count = 0;        foreach ($passed_students as $index => $student) {            // If marks are same as previous, same rank            if ($student['total_mark'] === $prev_marks) {                $same_rank_count++;            } else {                // New marks, assign new rank based on position                $rank = $index + 1;                $same_rank_count = 1;            }            $prev_marks = $student['total_mark'];            // Update database with calculated rank            ObtMarks::where('student_id', $student['student_id'])                ->where('fm_exam_subject_id', $student['fm_exam_subject_id'])                ->update(['rank' => $rank]);        }    }    function getGradePoint($mark){        if($mark>= 90)return 4.0;        if($mark>= 80)return 3.6;        if($mark>= 70)return 3.2;        if($mark>= 60)return 2.8;        if($mark>= 50)return 2.4;        if($mark>= 40)return 2.0;        if($mark>= 33)return 1.6;        return 0.0;    }    public function PublishResult(){        $exam_name = ObtMarks::latest()->limit(1)->first();        $result = ObtMarks::where('fm_exam_subject_id', $exam_name['fm_exam_subject_id'])->get();//            dd($result);        return view('dashboard.publish_result', compact('result', 'exam_name'));    }}